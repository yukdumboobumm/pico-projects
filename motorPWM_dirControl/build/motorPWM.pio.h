// -------------------------------------------------- //
// This file is autogenerated by pioasm; do not edit! //
// -------------------------------------------------- //

#pragma once

#if !PICO_NO_HARDWARE
#include "hardware/pio.h"
#endif

// -------- //
// motorPWM //
// -------- //

#define motorPWM_wrap_target 0
#define motorPWM_wrap 8

static const uint16_t motorPWM_program_instructions[] = {
            //     .wrap_target
    0x9080, //  0: pull   noblock         side 0     
    0xa027, //  1: mov    x, osr                     
    0xa046, //  2: mov    y, isr                     
    0x00a7, //  3: jmp    x != y, 7                  
    0x00c6, //  4: jmp    pin, 6                     
    0x1808, //  5: jmp    8               side 2     
    0x1408, //  6: jmp    8               side 1     
    0xa042, //  7: nop                               
    0x0083, //  8: jmp    y--, 3                     
            //     .wrap
};

#if !PICO_NO_HARDWARE
static const struct pio_program motorPWM_program = {
    .instructions = motorPWM_program_instructions,
    .length = 9,
    .origin = -1,
};

static inline pio_sm_config motorPWM_program_get_default_config(uint offset) {
    pio_sm_config c = pio_get_default_sm_config();
    sm_config_set_wrap(&c, offset + motorPWM_wrap_target, offset + motorPWM_wrap);
    sm_config_set_sideset(&c, 3, true, false);
    return c;
}

static inline void motorPWM_program_init(PIO pio, uint sm, uint offset, uint firstPWMpin, uint jumpPin) {
    // Initialize the output pins
    pio_gpio_init(pio, firstPWMpin);
    pio_gpio_init(pio, firstPWMpin + 1);
    //pio_gpio_init(pio, jumpPin);
    // Set consecutive pin directions for both output pins
    pio_sm_set_consecutive_pindirs(pio, sm, firstPWMpin, 2, true);
    // Load default config and set side-set pins
    pio_sm_config c = motorPWM_program_get_default_config(offset);
    sm_config_set_sideset_pins(&c, firstPWMpin);
    // Set the pin used for conditional jump
    sm_config_set_jmp_pin(&c, jumpPin);
    // Configure clkdiv, assuming 1 as the value
    sm_config_set_clkdiv(&c, 1);
    // Initialize the state machine with the updated configuration
    pio_sm_init(pio, sm, offset, &c);
    // Set both pins to 0
    pio_sm_set_pins(pio, sm, 0);
}

#endif

