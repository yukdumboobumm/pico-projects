// -------------------------------------------------- //
// This file is autogenerated by pioasm; do not edit! //
// -------------------------------------------------- //

#pragma once

#if !PICO_NO_HARDWARE
#include "hardware/pio.h"
#endif

// ----------- //
// pulse_count //
// ----------- //

#define pulse_count_wrap_target 0
#define pulse_count_wrap 12

static const uint16_t pulse_count_program_instructions[] = {
            //     .wrap_target
    0xa04b, //  0: mov    y, !null                   
    0x80a0, //  1: pull   block                      
    0x6060, //  2: out    null, 32                   
    0xe020, //  3: set    x, 0                       
    0x2020, //  4: wait   0 pin, 0                   
    0x20a0, //  5: wait   1 pin, 0                   
    0x8080, //  6: pull   noblock                    
    0x6020, //  7: out    x, 32                      
    0x002b, //  8: jmp    !x, 11                     
    0xa0ca, //  9: mov    isr, !y                    
    0x8000, // 10: push   noblock                    
    0xe020, // 11: set    x, 0                       
    0x0084, // 12: jmp    y--, 4                     
            //     .wrap
};

#if !PICO_NO_HARDWARE
static const struct pio_program pulse_count_program = {
    .instructions = pulse_count_program_instructions,
    .length = 13,
    .origin = -1,
};

static inline pio_sm_config pulse_count_program_get_default_config(uint offset) {
    pio_sm_config c = pio_get_default_sm_config();
    sm_config_set_wrap(&c, offset + pulse_count_wrap_target, offset + pulse_count_wrap);
    return c;
}

static inline void pulse_count_program_init(PIO pio, uint sm, uint offset, uint pulsePin) {
    // Set consecutive pin directions
    pio_sm_set_consecutive_pindirs(pio, sm, pulsePin, 1, false);
    gpio_pull_down(pulsePin);
    // Load default config
    pio_sm_config c = pulse_count_program_get_default_config(offset);
    // Configure clkdiv
    sm_config_set_clkdiv(&c, 1);
    // set the 'wait' pin (uses 'in' pins)
    sm_config_set_in_pins(&c, pulsePin);
    // set shift direction
    //sm_config_set_in_shift(&c, false, false, 0);
    // shift to left, autopull disabled
	//sm_config_set_in_shift(&c, false, false, 32);
	// don't join FIFO's
	//sm_config_set_fifo_join(&c, PIO_FIFO_JOIN_NONE);
    // Initialize the state machine with the updated configuration
    pio_sm_init(pio, sm, offset, &c);
}

#endif

