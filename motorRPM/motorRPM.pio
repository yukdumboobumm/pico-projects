;;;;
.program pulse_count

init:
    mov y !null         ; start with 0xffffffff and count down for each pulse
    set x  0            ; make sure x is zero so OSR doesn't pull a random value
    pull block
    out null 32
count:
    wait 0 pin 0        ; DO nothing WHILE pin is HIGH
    wait 1 pin 0        ; DO nothing WHILE pin is LOW
    pull noblock        ; pull a value from TX FIFO -> OSR, if it exists,
    out x 32
    ;;;;;;;;;;;;        ; if it's empty, this should copy 0 to OSR from x
    jmp !x handler   ; send count to main if OSR has an instruction (is not empty)
    jmp y-- count
handler:
    mov isr !y          ; send count to the ISR
    push noblock        ; push count to main

% c-sdk {
static inline void pulse_count_program_init(PIO pio, uint sm, uint offset, uint pulsePin) {
    // Set consecutive pin directions
    pio_sm_set_consecutive_pindirs(pio, sm, pulsePin, 1, false);
    gpio_pull_up(pulsePin);

    // Load default config
    pio_sm_config c = pulse_count_program_get_default_config(offset);
    
    // Configure clkdiv
    sm_config_set_clkdiv(&c, 1);
    // set the 'wait' pin (uses 'in' pins)
    sm_config_set_in_pins(&c, pulsePin);
    
    // set shift direction
    //sm_config_set_in_shift(&c, false, false, 0);
    // shift to left, autopull disabled
	//sm_config_set_in_shift(&c, false, false, 32);
	// don't join FIFO's
	sm_config_set_fifo_join(&c, PIO_FIFO_JOIN_NONE);

    // Initialize the state machine with the updated configuration
    pio_sm_init(pio, sm, offset, &c);
}
%}




    